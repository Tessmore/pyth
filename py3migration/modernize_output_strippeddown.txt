This is the output of 
  python-modernize -w pyth6 >pyth6/modernize_output.txt
minus all blocks containing only the following:
- 'from __future__ import' additions
- 'import six' additions
- print statements rewritten into print function calls
- mentions of six.iteritems
- mentions of six.text_type

--- pyth6\pyth\encodings\symbol.py	(original)
+++ pyth6\pyth\encodings\symbol.py	(refactored)
@@ -1,8 +1,11 @@
 """ 
 Maps Symbol typeface to Unicode, extracted from http://en.wikipedia.org/wiki/Symbol_(typeface)
 """
+from __future__ import absolute_import
 
 import codecs
+import six
+from six.moves import map
 
 decodeTable = {
     33: 33, 34: 8704, 35: 35, 36: 8707, 37: 37, 38: 38, 39: 8717, 40: 40, 41: 41, 42: 42, 43: 43, 44: 44, 45: 45, 46: 46,
--- pyth6\pyth\plugins\python\reader.py	(original)
+++ pyth6\pyth\plugins\python\reader.py	(refactored)
@@ -88,27 +90,23 @@
     def __str__(self):
         return "%s(%s) [ %s ]" % (
             self.__class__.__name__,
-            ", ".join("%s=%s" % (k, repr(v)) for (k,v) in self.properties.iteritems()),
+            ", ".join("%s=%s" % (k, repr(v)) for (k,v) in six.iteritems(self.properties)),
             ", ".join(repr(x) for x in self.content))
 
 
 
-class P(_PythonBase):
-    __metaclass__ = _MetaPythonBase()    
+class P(six.with_metaclass(_MetaPythonBase(), _PythonBase)):
     pythType = Paragraph
 
 
-class LE(_PythonBase):
-    __metaclass__ = _MetaPythonBase()
+class LE(six.with_metaclass(_MetaPythonBase(), _PythonBase)):
     pythType = ListEntry
 
-class L(_PythonBase):
-    __metaclass__ = _MetaPythonBase()    
+class L(six.with_metaclass(_MetaPythonBase(), _PythonBase)):
     pythType = List
 
 
-class T(_PythonBase):
-    __metaclass__ = _MetaPythonBase()    
+class T(six.with_metaclass(_MetaPythonBase(), _PythonBase)):
     __repr__ = _PythonBase.__str__
     pythType = Text
 
--- pyth6\pyth\plugins\rtf15\writer.py	(original)
+++ pyth6\pyth\plugins\rtf15\writer.py	(refactored)
@@ -3,11 +3,14 @@
 
 http://www.biblioscape.com/rtf15_spec.htm
 """
+from __future__ import absolute_import
 
 from pyth import document
 from pyth.format import PythWriter
 
 from cStringIO import StringIO
+import six
+from six.moves import range
 
 
 # XXX Todo -- Make these parameters
--- pyth6\tests\test_readrtf15.py	(original)
+++ pyth6\tests\test_readrtf15.py	(refactored)
@@ -20,13 +23,12 @@
         for path in files:
             name = os.path.splitext(os.path.basename(path))[0]
             dict["test_%s" % name] = gen_file_test(path, name)
-            print path, name
+            print(path, name)
 
         return type.__new__(meta, name, bases, dict)
 
 
-class TestRtfFile(unittest.TestCase):
-    __metaclass__ = TestRtfMeta
+class TestRtfFile(six.with_metaclass(TestRtfMeta, unittest.TestCase)):
     pass
 
 
